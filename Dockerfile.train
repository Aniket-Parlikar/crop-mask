FROM continuumio/miniconda3 as base

FROM base as reqs
COPY environment.yml environment.yml
RUN conda env create -f environment.yml
SHELL ["conda", "run", "-n", "landcover-mapping", "/bin/bash", "-c"]

#FROM reqs as get-data-stage
#COPY .dvc /crop-mask/.dvc
#COPY .git /crop-mask/.git
#COPY data /crop-mask/data
#WORKDIR /crop-mask
#RUN --mount=type=secret,id=aws,target=/root/.aws/credentials dvc pull data/features

#FROM get-data-stage as train-stage
#COPY scripts /crop-mask/scripts
#COPY src /crop-mask/src
#WORKDIR /crop-mask/scripts

# Train model
#ARG DATASETS
#ARG MODEL_NAME
#RUN --mount=type=secret,id=clearml,target=/root/clearml.conf python model.py --model_name $MODEL_NAME --datasets $DATASETS --max_epochs 2
#
## Push model to remote storage
#RUN --mount=type=secret,id=aws,target=/root/.aws/credentials dvc add ../data/models && dvc push
#
## Output models.dvc file to track new model in remote storage
#FROM scratch AS export-stage
#COPY --from=train-stage /crop-mask/data/models.dvc .
